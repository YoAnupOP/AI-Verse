Okay, this is a cool and complex carousel! Converting this to Next.js + Tailwind CSS involves several steps:

Setting up the Next.js Project:

npx create-next-app@latest my-futuristic-carousel --typescript --tailwind --eslint

Navigate into the project: cd my-futuristic-carousel

Structuring the Component:

We'll create a main component, let's say FuturisticCarousel.tsx inside a components folder.

The card data will be an array of objects.

Translating HTML to JSX:

class becomes className.

SVG icons can be directly used in JSX.

Image handling: Next.js <Image> component is preferred for optimization, but for picsum.photos direct URLs, standard <img> is fine. We'll use <img> to keep it simple for this example.

Translating CSS to Tailwind CSS & Global CSS:

Most utility-based styles (flex, padding, margin, colors, text sizes) will become Tailwind classes.

Complex animations (@keyframes), pseudo-elements (::before, ::after for effects like the grid or HUD overlays), and CSS variables (:root) will go into app/globals.css.

Tailwind's JIT compiler allows arbitrary values, which is great for specific pixel values or complex transform properties not covered by default utilities. We'll use these extensively.

The custom fonts (Exo 2, Orbitron) need to be imported in app/layout.tsx or globals.css.

Translating JavaScript to React Logic:

document.querySelector will be replaced by useRef for DOM elements.

Component state (like currentIndex) will be managed by useState.

Event listeners will be attached declaratively in JSX (onClick, onMouseDown, etc.) or imperatively in useEffect hooks (with cleanup).

Functions like initializeCarousel, updateCarousel, moveToSlide will become part of the React component.

The MutationObserver and other direct DOM manipulations will need careful translation, often using useEffect and useRef.

Let's start building!

1. tailwind.config.ts (Optional, but good for custom fonts/animations if not using arbitrary values everywhere):

You can extend your theme here, especially for fonts if you want to use them like font-exo or font-orbitron. For simplicity, we'll primarily use globals.css for fonts and keyframes. Ensure your tailwind.config.ts content array includes ./components/**/*.{js,ts,jsx,tsx,mdx}.

import type { Config } from 'tailwindcss';

const config: Config = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        exo: ['"Exo 2"', 'sans-serif'],
        orbitron: ['Orbitron', 'sans-serif'],
      },
      // You can define keyframes and animations here too,
      // but globals.css is often simpler for complex ones.
      // Example:
      // keyframes: {
      //   gridMove: { /* ... */ },
      // },
      // animation: {
      //   gridMove: 'gridMove 60s linear infinite',
      // },
      colors: {
        'glow-primary': 'rgba(56, 189, 248, 0.7)',
        'glow-secondary': 'rgba(94, 234, 212, 0.6)',
        'neon-pink': 'rgba(236, 72, 153, 0.8)',
        'neon-blue': 'rgba(59, 130, 246, 0.8)',
        'neon-green': 'rgba(16, 185, 129, 0.8)',
      },
    },
  },
  plugins: [],
};
export default config;


2. app/globals.css:

@import url('https://fonts.googleapis.com/css2?family=Exo+2:wght@300;400;700&family=Orbitron:wght@400;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --glow-primary: rgba(56, 189, 248, 0.7);
  --glow-secondary: rgba(94, 234, 212, 0.6);
  --neon-pink: rgba(236, 72, 153, 0.8);
  --neon-blue: rgba(59, 130, 246, 0.8);
  --neon-green: rgba(16, 185, 129, 0.8);
  /* Forcing dark mode for the body */
  color-scheme: dark;
}

body {
  font-family: "Exo 2", sans-serif;
  /* background: radial-gradient(circle at center, #0f172a, #020617); Tailwind handles this with classes */
  /* min-height: 100vh; display: flex; justify-content: center; align-items: center; */
  /* overflow: hidden; position: relative; */
}

/* Background grid effect */
body::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image: linear-gradient(rgba(14, 165, 233, 0.1) 1px, transparent 1px),
    linear-gradient(90deg, rgba(14, 165, 233, 0.1) 1px, transparent 1px);
  background-size: 40px 40px;
  background-position: center center;
  perspective: 1000px;
  transform-style: preserve-3d;
  animation: gridMove 60s linear infinite;
  z-index: -10; /* Ensure it's behind everything */
}

@keyframes gridMove {
  0% {
    background-position: 0px 0px;
    opacity: 0.5;
  }
  50% {
    opacity: 0.2;
  }
  100% {
    background-position: 40px 40px;
    opacity: 0.5;
  }
}

/* Holographic border effect for active card (applied via class .holographic-border-active) */
.carousel-card.holographic-border-active::before {
  content: "";
  position: absolute;
  inset: -2px;
  background: linear-gradient(
    45deg,
    transparent 0%,
    var(--neon-blue) 25%,
    var(--neon-green) 50%,
    var(--neon-pink) 75%,
    transparent 100%
  );
  z-index: -1;
  border-radius: 1.3rem; /* Slightly larger than card's rounded-3xl */
  filter: blur(8px);
  opacity: 1; /* Controlled by class, here it's on */
  transition: opacity 0.5s ease;
  animation: borderGlow 6s linear infinite;
  background-size: 300% 300%;
}


@keyframes borderGlow {
  0% {
    background-position: 0% 50%;
    opacity: 0.3;
  }
  50% {
    background-position: 100% 50%;
    opacity: 0.5;
  }
  100% {
    background-position: 0% 50%;
    opacity: 0.3;
  }
}
.carousel-card.holographic-border-active::before {
    opacity: 1;
}


/* HUD overlay effect on images */
.card-image-container::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(120deg, rgba(56, 189, 248, 0.1), transparent 70%),
    radial-gradient(circle at 80% 20%, rgba(94, 234, 212, 0.15), transparent 50%);
  pointer-events: none;
}

/* Scan line effect */
.card-image-container::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: repeating-linear-gradient(
    0deg,
    rgba(6, 182, 212, 0.05) 0px,
    rgba(6, 182, 212, 0.05) 1px,
    transparent 1px,
    transparent 4px
  );
  pointer-events: none;
  opacity: 0.5;
  z-index: 5;
}

/* Text glow effect (applied via class .text-glow-active on card title) */
.card-title.text-glow-active::after {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  color: transparent;
  -webkit-text-stroke: 0.5px; /* Will use the current text color */
  filter: blur(3px);
  opacity: 0.8; /* Controlled by class, here it's on */
  transition: opacity 0.3s ease;
}

/* Button hover effect (applied via class .button-glow-hover on buttons) */
.carousel-button.button-glow-hover::before {
  content: "";
  position: absolute;
  inset: -2px;
  background: radial-gradient(circle, var(--neon-blue), transparent 70%);
  border-radius: 50%;
  opacity: 0.7;
  z-index: -1;
  transition: opacity 0.3s ease;
  animation: pulseGlow 2s infinite;
}

@keyframes pulseGlow {
  0% {
    transform: scale(1);
    opacity: 0.7;
  }
  50% {
    transform: scale(1.2);
    opacity: 0.3;
  }
  100% {
    transform: scale(1);
    opacity: 0.7;
  }
}

/* Active card scanning animation */
@keyframes scanAnimation {
    0% { top: 0; opacity: 0.7; }
    75% { top: calc(100% - 2px); opacity: 0.7; }
    100% { top: calc(100% - 2px); opacity: 0; }
}
.scan-line-animate {
    animation: scanAnimation 2s ease-in-out;
}

/* Floating animation for cards if needed */
/*
@keyframes floating {
    0% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
    100% { transform: translateY(0px); }
}
.card-floating {
    animation: floating 4s ease-in-out infinite;
}
*/

/* Tailwind's JIT can handle most transforms, but for complex combined states like these,
   it might be cleaner to define specific classes or use inline styles in React directly.
   For this example, we will use inline styles for the complex transforms on cards.
*/

/* Ensure body takes full height and centers content for the page */
html, body, #__next {
  height: 100%;
}
body {
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  position: relative;
  background: radial-gradient(circle at center, #0f172a, #020617); /* slate-900 to blue-950ish */
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Css
IGNORE_WHEN_COPYING_END

3. app/layout.tsx (To ensure fonts are loaded and body styles are applied):

import type { Metadata } from "next";
import "./globals.css"; // Tailwind and custom global styles

export const metadata: Metadata = {
  title: "Futuristic Carousel",
  description: "Next.js + Tailwind CSS Futuristic Carousel",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      {/* Body class is applied here for global styles like background and font */}
      <body className="bg-slate-900 text-slate-100 font-exo">
        {children}
      </body>
    </html>
  );
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Tsx
IGNORE_WHEN_COPYING_END

4. components/FuturisticCarousel.tsx:

This is the core component. It's quite long due to the amount of logic.

'use client';

import React, { useState, useEffect, useRef, useCallback } from 'react';
import Image from 'next/image'; // Or use <img> if preferred for picsum

interface CardData {
  id: number;
  imageSrc: string;
  imageAlt: string;
  title: string;
  titleColorClass: string;
  description: string;
  progress: number;
  phase: string;
  techTags: string[];
}

const cardItems: CardData[] = [
  {
    id: 1,
    imageSrc: "https://picsum.photos/320/200?t=1",
    imageAlt: "Synthwave City",
    title: "Project Alpha",
    titleColorClass: "text-cyan-400",
    description: "Exploring the neon-drenched landscapes of a digital frontier. AI-driven procedural generation creates infinite cityscapes.",
    progress: 65,
    phase: "PHASE II",
    techTags: ["Neural Networks", "Voxel Systems", "Quantum Rendering"],
  },
  {
    id: 2,
    imageSrc: "https://picsum.photos/320/200?t=2",
    imageAlt: "Neuro Interface",
    title: "Neuro-Link UI",
    titleColorClass: "text-blue-400",
    description: "Designing intuitive interfaces for brain-computer interaction. Holographic elements respond to neural patterns.",
    progress: 42,
    phase: "PHASE I",
    techTags: ["BCI Framework", "Gesture Recognition", "Thought Mapping"],
  },
  {
    id: 3,
    imageSrc: "https://picsum.photos/320/200?t=3",
    imageAlt: "Quantum Core",
    title: "Quantum Entanglement",
    titleColorClass: "text-purple-400",
    description: "Visualizing complex quantum states through advanced rendering techniques. Real-time simulation of parallel realities.",
    progress: 89,
    phase: "PHASE III",
    techTags: ["Q-Bit Architecture", "Multiverse Modeling", "Probability Fields"],
  },
  {
    id: 4,
    imageSrc: "https://picsum.photos/320/200?t=4",
    imageAlt: "Orbital Station",
    title: "Project Chimera",
    titleColorClass: "text-amber-400",
    description: "Developing next-gen propulsion systems for deep space exploration. Fusion drive concepts push beyond known physics.",
    progress: 51,
    phase: "PHASE II",
    techTags: ["Dark Energy Capture", "Plasma Containment", "Gravitational Lensing"],
  },
  {
    id: 5,
    imageSrc: "https://picsum.photos/320/200?t=5",
    imageAlt: "Data Stream",
    title: "Aether Network",
    titleColorClass: "text-emerald-400",
    description: "Building a decentralized data network leveraging quantum blockchain and next-gen P2P technology.",
    progress: 78,
    phase: "PHASE III",
    techTags: ["Quantum Encryption", "Self-Healing Nodes", "Data Holograms"],
  },
];

const debounce = <F extends (...args: any[]) => any>(func: F, wait: number): ((...args: Parameters<F>) => void) => {
  let timeout: ReturnType<typeof setTimeout> | null = null;
  return (...args: Parameters<F>) => {
    const later = () => {
      timeout = null;
      func(...args);
    };
    if (timeout) {
      clearTimeout(timeout);
    }
    timeout = setTimeout(later, wait);
  };
};


const FuturisticCarousel: React.FC = () => {
  const [currentIndex, setCurrentIndex] = useState(2); // Start with middle card as active
  const [cards, setCards] = useState<CardData[]>(cardItems);
  const trackRef = useRef<HTMLDivElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const cardRefs = useRef<(HTMLDivElement | null)[]>([]);

  const [cardWidth, setCardWidth] = useState(320); // Default, will be updated
  const cardMargin = 25 * 2; // 25px margin on each side

  const getCardDimensions = useCallback(() => {
    if (cardRefs.current[0]) {
      setCardWidth(cardRefs.current[0].offsetWidth);
    }
  }, []);
  
  const moveToSlide = useCallback((targetIndex: number) => {
    if (!trackRef.current || !containerRef.current || cardRefs.current.length === 0) return;
    if (targetIndex < 0 || targetIndex >= cards.length) return;

    const currentCardWidth = cardRefs.current[targetIndex]?.offsetWidth || cardWidth;
    
    const amountToMove = targetIndex * (currentCardWidth + cardMargin);
    const containerCenter = containerRef.current.offsetWidth / 2;
    const currentCardCenter = currentCardWidth / 2;
    const targetTranslateX = containerCenter - currentCardCenter - amountToMove;
    
    trackRef.current.style.transform = `translateX(${targetTranslateX - (cardMargin/2) + (25)}px)`; // +25 adjustment needed based on original margin
    setCurrentIndex(targetIndex);

    // Flash effect (optional)
    const flashEffect = document.createElement("div");
    flashEffect.className = "absolute inset-0 bg-[rgba(56,189,248,0.1)] z-30 pointer-events-none opacity-0 transition-opacity duration-200";
    containerRef.current.appendChild(flashEffect);
    setTimeout(() => {
      flashEffect.style.opacity = "0.3";
      setTimeout(() => {
        flashEffect.style.opacity = "0";
        setTimeout(() => {
          if (containerRef.current?.contains(flashEffect)) {
             containerRef.current.removeChild(flashEffect);
          }
        }, 200);
      }, 100);
    }, 10);

  }, [cards.length, cardWidth, cardMargin]);


  useEffect(() => {
    getCardDimensions();
    moveToSlide(currentIndex); // Initial positioning
    
    const debouncedResize = debounce(() => {
      getCardDimensions();
      moveToSlide(currentIndex);
    }, 250);

    window.addEventListener('resize', debouncedResize);
    return () => window.removeEventListener('resize', debouncedResize);
  }, [getCardDimensions, moveToSlide, currentIndex]);


  // Drag functionality
  const isDragging = useRef(false);
  const startPos = useRef(0);
  const currentTranslate = useRef(0);
  const prevTranslate = useRef(0);
  const animationID = useRef<number | null>(null);

  const getPositionX = (event: React.MouseEvent | React.TouchEvent) => {
    return 'touches' in event ? event.touches[0].clientX : event.pageX;
  };

  const dragStart = useCallback((event: React.MouseEvent | React.TouchEvent) => {
    isDragging.current = true;
    startPos.current = getPositionX(event);
    
    if (trackRef.current) {
        const transformMatrix = window.getComputedStyle(trackRef.current).getPropertyValue('transform');
        if (transformMatrix !== 'none') {
            currentTranslate.current = parseInt(transformMatrix.split(',')[4]);
        } else {
            currentTranslate.current = 0;
        }
        prevTranslate.current = currentTranslate.current;
        trackRef.current.style.transition = 'none'; // Disable transition during drag
    }
    
    animationID.current = requestAnimationFrame(animation);
    if (trackRef.current) trackRef.current.style.cursor = 'grabbing';
  }, []);

  const drag = useCallback((event: React.MouseEvent | React.TouchEvent) => {
    if (isDragging.current) {
      const currentPosition = getPositionX(event);
      const moveX = currentPosition - startPos.current;
      currentTranslate.current = prevTranslate.current + moveX;
    }
  }, []);
  
  const animation = useCallback(() => {
    if (!isDragging.current || !trackRef.current) return;
    trackRef.current.style.transform = `translateX(${currentTranslate.current}px)`;
    animationID.current = requestAnimationFrame(animation);
  }, []);

  const dragEnd = useCallback(() => {
    if (!isDragging.current || !trackRef.current) return;

    if (animationID.current) cancelAnimationFrame(animationID.current);
    isDragging.current = false;
    const movedBy = currentTranslate.current - prevTranslate.current;
    
    trackRef.current.style.transition = 'transform 0.75s cubic-bezier(0.21, 0.61, 0.35, 1)';
    trackRef.current.style.cursor = 'grab';

    const threshold = (cardRefs.current[0]?.offsetWidth || cardWidth) / 3.5;

    if (movedBy < -threshold && currentIndex < cards.length - 1) {
      moveToSlide(currentIndex + 1);
    } else if (movedBy > threshold && currentIndex > 0) {
      moveToSlide(currentIndex - 1);
    } else {
      moveToSlide(currentIndex); // Snap back
    }
  }, [currentIndex, cards.length, moveToSlide, cardWidth]);

  // Keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "ArrowRight" || e.key === "ArrowDown") {
        if (currentIndex < cards.length - 1) moveToSlide(currentIndex + 1);
      } else if (e.key === "ArrowLeft" || e.key === "ArrowUp") {
        if (currentIndex > 0) moveToSlide(currentIndex - 1);
      }
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [currentIndex, cards.length, moveToSlide]);

  // Active card animations (scan line, data counter)
  const [animatedProgress, setAnimatedProgress] = useState(0);
  const [showScanLine, setShowScanLine] = useState(false);

  useEffect(() => {
    const activeCardData = cards[currentIndex];
    if (!activeCardData) return;

    // Scan line
    setShowScanLine(true);
    const scanTimer = setTimeout(() => setShowScanLine(false), 2000);

    // Data counter and progress bar
    setAnimatedProgress(0); // Reset for animation
    const targetPercentage = activeCardData.progress;
    let currentPercentage = 0;
    
    const progressValueEl = cardRefs.current[currentIndex]?.querySelector('.progress-value-animated') as HTMLDivElement;
    if(progressValueEl) progressValueEl.style.width = '0%';


    const interval = setInterval(() => {
      currentPercentage += Math.ceil(targetPercentage / 15); // Animate in ~15 steps
      if (currentPercentage >= targetPercentage) {
        currentPercentage = targetPercentage;
        clearInterval(interval);
      }
      setAnimatedProgress(currentPercentage);
      if(progressValueEl) {
        progressValueEl.style.transition = 'width 0.8s cubic-bezier(0.17, 0.67, 0.83, 0.67)';
        progressValueEl.style.width = `${currentPercentage}%`;
      }
    }, 50);
    
    return () => {
      clearTimeout(scanTimer);
      clearInterval(interval);
      if(progressValueEl) progressValueEl.style.transition = 'none'; // Reset transition for next time
    };
  }, [currentIndex, cards]);


  const getCardStyle = (index: number): React.CSSProperties => {
    if (index === currentIndex) {
      return { transform: 'scale(1) rotateY(0deg) translateZ(0px)', opacity: 1, zIndex: 20, filter: 'saturate(1.2) brightness(1.1)' };
    } else if (index === currentIndex - 1) { // is-prev
      return { transformOrigin: 'right center', transform: 'scale(0.75) rotateY(45deg) translateX(-80px) translateZ(-150px)', opacity: 0.45, filter: 'saturate(0.6) brightness(0.7)' };
    } else if (index === currentIndex + 1) { // is-next
      return { transformOrigin: 'left center', transform: 'scale(0.75) rotateY(-45deg) translateX(80px) translateZ(-150px)', opacity: 0.45, filter: 'saturate(0.6) brightness(0.7)' };
    } else if (index < currentIndex -1) { // is-far-prev
        return { transform: 'scale(0.8) rotateY(35deg) translateZ(-100px)', opacity: 0.45, filter: 'saturate(0.6) brightness(0.7)' };
    } else if (index > currentIndex + 1) { // is-far-next
        return { transform: 'scale(0.8) rotateY(-35deg) translateZ(-100px)', opacity: 0.45, filter: 'saturate(0.6) brightness(0.7)' };
    }
    // Default for cards further away if needed, or same as far-prev/next
    return { transform: `scale(0.7) rotateY(${index < currentIndex ? 45 : -45}deg) translateZ(-200px)`, opacity: 0.3 };
  };


  return (
    <div ref={containerRef} className="carousel-container w-[90%] max-w-[1100px] relative perspective-[2000px] py-12 z-10">
      <div
        ref={trackRef}
        className="carousel-track flex transition-transform duration-700 ease-[cubic-bezier(0.21,0.61,0.35,1)] transform-style-preserve-3d cursor-grab"
        onMouseDown={dragStart}
        onTouchStart={dragStart}
        onMouseMove={drag}
        onTouchMove={drag}
        onMouseUp={dragEnd}
        onMouseLeave={dragEnd} // End drag if mouse leaves track
        onTouchEnd={dragEnd}
      >
        {cards.map((card, index) => {
          const isActive = index === currentIndex;
          const cardStyle = getCardStyle(index);

          return (
            <div
              key={card.id}
              ref={el => cardRefs.current[index] = el}
              className={`carousel-card group min-w-[320px] max-w-[320px] md:min-w-[260px] md:max-w-[260px] mx-[25px] md:mx-[15px] bg-gradient-to-br from-[rgba(30,41,59,0.85)] to-[rgba(15,23,42,0.9)] rounded-[1.2rem] overflow-visible relative border border-[rgba(94,234,212,0.2)] backdrop-blur-md transition-all duration-500 ease-[cubic-bezier(0.21,0.61,0.35,1)]
                ${isActive ? 'holographic-border-active shadow-[0_25px_50px_rgba(0,0,0,0.5),0_0_40px_var(--glow-primary),inset_0_0_20px_rgba(56,189,248,0.1)]' : 'shadow-[0_15px_25px_rgba(0,0,0,0.5),0_0_30px_rgba(56,189,248,0.2)]'}
              `}
              style={cardStyle}
            >
              <div className="card-image-container relative h-[200px] md:h-[160px] overflow-hidden border-b border-[rgba(94,234,212,0.3)]">
                <img // Using <img> for picsum. Use Next/Image for optimized local/remote images
                  src={card.imageSrc}
                  alt={card.imageAlt}
                  className={`card-image w-full h-full object-cover transition-transform duration-[1500ms] ease-out ${isActive ? 'scale-105' : 'scale-100'}`}
                  width={320} height={200} // Required for <img> or Next/Image
                />
                {isActive && showScanLine && (
                   <div className="scan-line-animate absolute left-0 top-0 h-[2px] w-full bg-gradient-to-r from-transparent via-[rgba(56,189,248,0.8)] to-transparent z-10 pointer-events-none"></div>
                )}
              </div>
              <div className="card-content p-7 text-slate-100">
                <h3
                  className={`card-title font-orbitron text-xl font-bold mb-3 tracking-wide relative inline-block ${card.titleColorClass} ${isActive ? 'text-glow-active' : ''}`}
                  data-text={card.title} // For CSS ::after glow
                >
                  {card.title}
                </h3>
                <p className="card-description text-sm leading-relaxed text-[rgba(241,245,249,0.8)] font-light">
                  {card.description}
                </p>
                <div className="card-progress h-[3px] bg-[rgba(56,189,248,0.15)] mt-5 relative rounded-md overflow-hidden">
                  <div 
                    className="progress-value-animated absolute h-full bg-gradient-to-r from-[var(--neon-blue)] to-[var(--neon-green)] rounded-md"
                    style={{ width: isActive ? `${animatedProgress}%` : `${card.progress}%`}} // Immediate for non-active
                  ></div>
                </div>
                <div className="card-stats flex justify-between mt-2 text-xs text-[rgba(241,245,249,0.6)]">
                  <span>{card.phase}</span>
                  <span>{isActive ? `${animatedProgress}%` : `${card.progress}%`} COMPLETE</span>
                </div>
              </div>
              <div className={`tech-details absolute bottom-0 left-0 right-0 bg-[rgba(15,23,42,0.85)] backdrop-blur-md p-3 transform transition-transform duration-400 ease-[cubic-bezier(0.21,0.61,0.35,1)] z-20 border-t border-[rgba(94,234,212,0.3)]
                ${isActive ? 'group-hover:translate-y-0 translate-y-full' : 'translate-y-full'}`}>
                {card.techTags.map(tag => (
                  <div key={tag} className="tech-tag inline-block mr-2 mb-2 px-2 py-1 text-xs bg-[rgba(56,189,248,0.15)] border border-[rgba(56,189,248,0.3)] rounded text-[#7dd3fc]">
                    {tag}
                  </div>
                ))}
              </div>
            </div>
          )
        })}
      </div>

      <button
        onClick={() => { if (currentIndex > 0) moveToSlide(currentIndex - 1); }}
        className="carousel-button prev group absolute top-1/2 -translate-y-1/2 left-[-24px] md:left-[5px] bg-[rgba(12,74,110,0.3)] text-cyan-400 border border-[rgba(14,165,233,0.4)] rounded-full w-12 h-12 md:w-10 md:h-10 flex justify-center items-center cursor-pointer z-20 transition-all duration-300 ease-out backdrop-blur-sm shadow-[0_0_15px_rgba(56,189,248,0.2)] hover:bg-[rgba(14,165,233,0.3)] hover:text-slate-100 hover:-translate-y-1/2 hover:scale-110 hover:shadow-[0_0_20px_rgba(56,189,248,0.4)] active:-translate-y-1/2 active:scale-95"
      >
        <span className="group-hover:button-glow-hover relative w-6 h-6"> {/* Wrapper for ::before */}
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="w-6 h-6">
            <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
          </svg>
        </span>
      </button>
      <button
        onClick={() => { if (currentIndex < cards.length - 1) moveToSlide(currentIndex + 1); }}
        className="carousel-button next group absolute top-1/2 -translate-y-1/2 right-[-24px] md:right-[5px] bg-[rgba(12,74,110,0.3)] text-cyan-400 border border-[rgba(14,165,233,0.4)] rounded-full w-12 h-12 md:w-10 md:h-10 flex justify-center items-center cursor-pointer z-20 transition-all duration-300 ease-out backdrop-blur-sm shadow-[0_0_15px_rgba(56,189,248,0.2)] hover:bg-[rgba(14,165,233,0.3)] hover:text-slate-100 hover:-translate-y-1/2 hover:scale-110 hover:shadow-[0_0_20px_rgba(56,189,248,0.4)] active:-translate-y-1/2 active:scale-95"
      >
         <span className="group-hover:button-glow-hover relative w-6 h-6">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="w-6 h-6">
            <path strokeLinecap="round" strokeLinejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
          </svg>
        </span>
      </button>

      <div className="carousel-indicators flex justify-center gap-2.5 mt-8">
        {cards.map((_, index) => (
          <div
            key={index}
            onClick={() => moveToSlide(index)}
            className={`indicator w-6 h-1 rounded-sm cursor-pointer transition-all duration-300 ease-out
              ${index === currentIndex ? 'bg-cyan-400 shadow-[0_0_10px_#38bdf8]' : 'bg-[rgba(56,189,248,0.2)]'}`}
          ></div>
        ))}
      </div>
    </div>
  );
};

export default FuturisticCarousel;
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Tsx
IGNORE_WHEN_COPYING_END

5. Use the component in app/page.tsx:

import FuturisticCarousel from "@/components/FuturisticCarousel";

export default function HomePage() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-center p-4 md:p-24 relative overflow-hidden">
      {/* The body::before from globals.css will handle the grid background */}
      <FuturisticCarousel />
    </main>
  );
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Tsx
IGNORE_WHEN_COPYING_END

Key changes and considerations:

Styling: Tailwind classes are used extensively. Arbitrary values (w-[90%], mx-[25px]) are common for precise replication.

CSS in globals.css: For @keyframes, complex pseudo-elements (body::before, image overlays), and CSS variables. Some effects like the holographic border and text glow are applied via classes defined in globals.css and toggled in JSX.

React Hooks: useState for state, useRef for DOM references, useEffect for side effects (event listeners, animations on active card change, resize handling). useCallback is used for functions passed to event handlers or effects to prevent unnecessary re-creations.

Card Transforms: The complex transform logic for is-active, is-prev, is-next is now handled by the getCardStyle function returning an inline style object. This gives more control than trying to manage many conditional Tailwind classes for these specific transform states.

Image Elements: I've used <img> for simplicity with picsum.photos. If you have static images, Next.js <Image> component is highly recommended for optimization. You'd need to import them or provide correct src paths.

Debounce: The debounce function is kept as it's good practice for resize handlers.

Animations on Active Card: The scan line and data counter animations are triggered in useEffect when currentIndex (and thus the active card) changes.

Drag Functionality: Largely preserved, adapted for React refs and state.

Accessibility & Refinements: This conversion focuses on visual and functional parity. Further work could be done for ARIA attributes, more robust focus management, and potentially optimizing the drag animations further.

overflow-visible on card: This is important for the ::before holographic border to be visible outside the card's bounds.

transform-style-preserve-3d and perspective: Crucial for the 3D effect of the carousel.

Z-indexing: Carefully managed with Tailwind's z- utilities.

This is a substantial component. Test thoroughly, especially the responsive behavior and the animations! The provided code attempts to match the original as closely as possible within the React/Tailwind paradigm.